This is a README for project-1 CS5700.
The problem statement states requires us to code a client that communicates with a server through a given port.

The client should send a 'HELLO' message in the following format:
cs5700spring2019 HELLO [your NEU ID]\n

To the above 'HELLO' message, the server would respond with an expression in a 'STATUS' message as follows:
cs5700spring2019 STATUS [a number] [a math operator] [another number]\n

The client should then solve the expression and send the solution in the 'SOLUTION' format:
cs5700spring2019 [the solution]\n
with a few constraints like not sending floating point numbers.

The server can send the 'STATUS' message as many times as it wants. The client should be able to solve all the expressions it receives and send the correct solution to the server.
Once the server is done sending the 'STATUS' message, it will send a 'BYE' message with a secret key. This key is to be printed on screen.

I started by reading up on 'sockets' which is an in-built library in Python. I created a simple server and client to communicate with each other.
I had to keep the following points in mind:
	- The client would have to connect to server and send the first 'HELLO' message.
	- The client should be able to accomodate the 'STATUS' messages sent by the server (the number of status messages was not defined and hence a loop had to be used)
	- The client should be able to recognize the type of message sent by the server and choose an appropriate course of action.
	- The client should print suitable message and terminate if the message sent by server is not in proper format (defensive code)
	- The port could either be provided by the user or a default port could be used.

[CLI]
To gather the arguments from the CLI, argparse library was used.
It provides functionality that can accomodate the input of arguments to the client program.
If the ./client is run with the --help [-h] argument, then we get information about the program as follows:
-bash-4.2$ ./client -h
usage: client [-h] [--port PORT] [--setSSL] [--debug] [--info] hostname nuid

This is simple client program for project-1 for cs5700

positional arguments:
  hostname              Enter the hostname.
  nuid                  Enter the NUID

optional arguments:
  -h, --help            show this help message and exit
  --port PORT, -p PORT  Enter port number (default: 27995)
  --setSSL, -s          Add this option if SSL connection is required
  --debug, -d           Add this option if you want to see debug messages
  --info, -i            Add this option if you want to see info messages

This provides better usability to the user.

In the program, the follwing tasks are performed [in order]
1. Requirements are stored in their appropriate variables.
2. Logger is initialised.
3. To connect to the server, the following steps take place
	a. Socket is created using socket library in python.
	b. Appropriate PORT and ADDRESS is chosen (based on arguments) and a connection is formed.
	c. The client sends the 'HELLO' message.
	d. The client runs in an infinite loop to read the 'STATUS' message from the server.
	e. Once the 'STATUS' message arrives, the client solves the expression and sends the solution back to the server in appropriate format.
	f. Client waits for the next 'STATUS' message.
	g. Repeat steps d-f until a 'BYE' message arrives.
	h. Print the secret flag in the 'BYE' message.
	i. Close the connection and terminate the program.
	* If any other message is sent by server, the program prints an error and terminates the program.
4. Since the debug messages are long, they are written to a file called 'log' in the same directory as 'client'. This is only activated with '-d' option.

[EXTRA CREDIT]
For extra credit, support for SSL connection was required by the socket. The -s parameter would be used to connect using SSL through the port 27996.
To accomodate this, my program checks if the -s flag was set. If flag was set, it wraps the socket in a SSL wrapper using the in-built SSL library in python and the rest of the program continues as above.

[CHALLENGES]
1. The first challenge I faced was consuming the arguments from the command line and making the client perform actions based on the arguments. I overcame this challenge by using the argparse library.
2. The next challenge was to use the appropriate port for the connection and override the default port when it is specified by the uesr. This was solved by using the 'default' option in argparse and a global variable.
3. The third challenge was to keep a track of the logs and understanding exactly what the program did. The logging library helped me solve this.

[TEST]
- Initially I wrote a simple server myself on the local machine to understand the code and how it works.
- Once that started working as expected, I added the functionality of providing the port and setting the SSL option.
- Finally I ran the code on the server to ensure the output was as expected.
- Testing the port option was a little tricky because the connection would not be accepted and hence I had to rely on log messages to ensure it was working fine.
